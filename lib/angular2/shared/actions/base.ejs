/* tslint:disable */
import { Action } from '@ngrx/store';
import { type } from '../util';
import { LoopBackFilter } from '../models/BaseModels';

/**
 * @module BaseLoopbackActionTypesFactory
 * @author João Ribeiro <@JonnyBGod> <github:JonnyBGod>
 * @license MIT
 * @description
 * Factory function that will be implemented in every custom actions automatically built
 * by the sdk builder.
 * It provides the core action types for each model to interact with API
 **/
export function BaseLoopbackActionTypesFactory(modelName: string) {
    let types = {
        CREATE: type(`[${modelName}] Create`),
        CREATE_SUCCESS: type(`[${modelName}] Create Success`),
        CREATE_FAIL: type(`[${modelName}] Create Fail`),

        CREATE_MANY: type(`[${modelName}] CreateMany`),
        CREATE_MANY_SUCCESS: type(`[${modelName}] CreateMany Success`),
        CREATE_MANY_FAIL: type(`[${modelName}] CreateMany Fail`),

        FIND_BY_ID: type(`[${modelName}] FindById`),
        FIND_BY_ID_SUCCESS: type(`[${modelName}] FindById Success`),
        FIND_BY_ID_FAIL: type(`[${modelName}] FindById Fail`),

        FIND: type(`[${modelName}] Find`),
        FIND_SUCCESS: type(`[${modelName}] Find Success`),
        FIND_FAIL: type(`[${modelName}] Find Fail`),

        FIND_ONE: type(`[${modelName}] FindOne`),
        FIND_ONE_SUCCESS: type(`[${modelName}] FindOne Success`),
        FIND_ONE_FAIL: type(`[${modelName}] FindOne Fail`),

        UPDATE_ALL: type(`[${modelName}] UpdateAll`),
        UPDATE_ALL_SUCCESS: type(`[${modelName}] UpdateAll Success`),
        UPDATE_ALL_FAIL: type(`[${modelName}] UpdateAll Fail`),

        DELETE_BY_ID: type(`[${modelName}] DeleteById`),
        DELETE_BY_ID_SUCCESS: type(`[${modelName}] DeleteById Success`),
        DELETE_BY_ID_FAIL: type(`[${modelName}] DeleteById Fail`),

        UPDATE_ATTRIBUTES: type(`[${modelName}] UpdateAttributes`),
        UPDATE_ATTRIBUTES_SUCCESS: type(
            `[${modelName}] UpdateAttributes Success`
        ),
        UPDATE_ATTRIBUTES_FAIL: type(`[${modelName}] UpdateAttributes Fail`),

        UPSERT: type(`[${modelName}] Upsert`),
        UPSERT_SUCCESS: type(`[${modelName}] Upsert Success`),
        UPSERT_FAIL: type(`[${modelName}] Upsert Fail`),

        UPSERT_WITH_WHERE: type(`[${modelName}] UpsertWithWhere`),
        UPSERT_WITH_WHERE_SUCCESS: type(
            `[${modelName}] UpsertWithWhere Success`
        ),
        UPSERT_WITH_WHERE_FAIL: type(`[${modelName}] UpsertWithWhere Fail`),

        REPLACE_OR_CREATE: type(`[${modelName}] ReplaceOrCreate`),
        REPLACE_OR_CREATE_SUCCESS: type(
            `[${modelName}] ReplaceOrCreate Success`
        ),
        REPLACE_OR_CREATE_FAIL: type(`[${modelName}] ReplaceOrCreate Fail`),

        REPLACE_BY_ID: type(`[${modelName}] ReplaceById`),
        REPLACE_BY_ID_SUCCESS: type(`[${modelName}] ReplaceById Success`),
        REPLACE_BY_ID_FAIL: type(`[${modelName}] ReplaceById Fail`),

        PATCH_OR_CREATE: type(`[${modelName}] PatchOrCreate`),
        PATCH_OR_CREATE_SUCCESS: type(`[${modelName}] PatchOrCreate Success`),
        PATCH_OR_CREATE_FAIL: type(`[${modelName}] PatchOrCreate Fail`),

        PATCH_ATTRIBUTES: type(`[${modelName}] PatchAttributes`),
        PATCH_ATTRIBUTES_SUCCESS: type(
            `[${modelName}] PatchAttributes Success`
        ),
        PATCH_ATTRIBUTES_FAIL: type(`[${modelName}] PatchAttributes Fail`),

        GUARD_FAIL: type(`[${modelName}] Guard Fail`),

        RESET_STATE: type(`[${modelName}] Reset State`)
    };

    return types;
}

/**
 * @module BaseLoopbackActionsFactory
 * @author João Ribeiro <@JonnyBGod> <github:JonnyBGod>
 * @license MIT
 * @description
 * Factory function that will be implemented in every custom actions automatically built
 * by the sdk builder.
 * It provides the core actions for each model to interact with API
 **/
export function BaseLoopbackActionsFactory<T>(actionTypes: any) {
    let actions = {
        /**
         * @method create
         * @author João Ribeiro <t: JonnyBGod, gh: mean-expert-official>
         * @license MIT
         * @description
         * Generic create action
         */
        create: class implements Action {
            public readonly type = actionTypes['CREATE'];

            constructor(public payload: any, public meta?: any) {}
        },

        /**
         * @method createSuccess
         * @author João Ribeiro <t: JonnyBGod, gh: mean-expert-official>
         * @license MIT
         * @description
         * Generic createSuccess action
         */
        createSuccess: class implements Action {
            public readonly type = actionTypes['CREATE_SUCCESS'];

            constructor(public payload: T, public meta?: any) {}
        },
        /**
         * @method createFail
         * @author João Ribeiro <t: JonnyBGod, gh: mean-expert-official>
         * @license MIT
         * @description
         * Generic createFail action
         */
        createFail: class implements Action {
            public readonly type = actionTypes['CREATE_FAIL'];

            constructor(public payload: any, public meta?: any) {}
        },
        /**
         * @method createMany
         * @author João Ribeiro <t: JonnyBGod, gh: mean-expert-official>
         * @license MIT
         * @description
         * Generic createMany action
         */
        createMany: class implements Action {
            public readonly type = actionTypes['CREATE_MANY'];

            constructor(public payload: any, public meta?: any) {}
        },
        /**
         * @method createManySuccess
         * @author João Ribeiro <t: JonnyBGod, gh: mean-expert-official>
         * @license MIT
         * @description
         * Generic createManySuccess action
         */
        createManySuccess: class implements Action {
            public readonly type = actionTypes['CREATE_MANY_SUCCESS'];

            constructor(public payload: T[], public meta?: any) {}
        },
        /**
         * @method createManyFail
         * @author João Ribeiro <t: JonnyBGod, gh: mean-expert-official>
         * @license MIT
         * @description
         * Generic createManyFail action
         */
        createManyFail: class implements Action {
            public readonly type = actionTypes['CREATE_MANY_FAIL'];

            constructor(public payload: any, public meta?: any) {}
        },
        /**
         * @method findById
         * @author João Ribeiro <t: JonnyBGod, gh: mean-expert-official>
         * @license MIT
         * @description
         * Generic findById action
         */
        findById: class implements Action {
            public readonly type = actionTypes['FIND_BY_ID'];
            public payload: { id: any; filter: LoopBackFilter };

            constructor(id: any, filter: LoopBackFilter, public meta?: any) {
                this.payload = { id, filter };
            }
        },
        /**
         * @method findByIdSuccess
         * @author João Ribeiro <t: JonnyBGod, gh: mean-expert-official>
         * @license MIT
         * @description
         * Generic findByIdSuccess action
         */
        findByIdSuccess: class implements Action {
            public readonly type = actionTypes['FIND_BY_ID_SUCCESS'];

            constructor(public payload: T, public meta?: any) {}
        },
        /**
         * @method findByIdFail
         * @author João Ribeiro <t: JonnyBGod, gh: mean-expert-official>
         * @license MIT
         * @description
         * Generic findByIdFail action
         */
        findByIdFail: class implements Action {
            public readonly type = actionTypes['FIND_BY_ID_FAIL'];

            constructor(public payload: any, public meta?: any) {}
        },
        /**
         * @method find
         * @author João Ribeiro <t: JonnyBGod, gh: mean-expert-official>
         * @license MIT
         * @description
         * Generic find action
         */
        find: class implements Action {
            public readonly type = actionTypes['FIND'];

            constructor(
                public payload: LoopBackFilter = {},
                public meta?: any
            ) {}
        },
        /**
         * @method findSuccess
         * @author João Ribeiro <t: JonnyBGod, gh: mean-expert-official>
         * @license MIT
         * @description
         * Generic findSuccess action
         */
        findSuccess: class implements Action {
            public readonly type = actionTypes['FIND_SUCCESS'];

            constructor(public payload: T[], public meta?: any) {}
        },
        /**
         * @method findFail
         * @author João Ribeiro <t: JonnyBGod, gh: mean-expert-official>
         * @license MIT
         * @description
         * Generic findFail action
         */
        findFail: class implements Action {
            public readonly type = actionTypes['FIND_FAIL'];

            constructor(public payload: any, public meta?: any) {}
        },
        /**
         * @method findOne
         * @author João Ribeiro <t: JonnyBGod, gh: mean-expert-official>
         * @license MIT
         * @description
         * Generic findOne action
         */
        findOne: class implements Action {
            public readonly type = actionTypes['FIND_ONE'];

            constructor(
                public payload: LoopBackFilter = {},
                public meta?: any
            ) {}
        },
        /**
         * @method findOneSuccess
         * @author João Ribeiro <t: JonnyBGod, gh: mean-expert-official>
         * @license MIT
         * @description
         * Generic findOneSuccess action
         */
        findOneSuccess: class implements Action {
            public readonly type = actionTypes['FIND_ONE_SUCCESS'];

            constructor(public payload: T, public meta?: any) {}
        },
        /**
         * @method findOneFail
         * @author João Ribeiro <t: JonnyBGod, gh: mean-expert-official>
         * @license MIT
         * @description
         * Generic findOneFail action
         */
        findOneFail: class implements Action {
            public readonly type = actionTypes['FIND_ONE_FAIL'];

            constructor(public payload: any, public meta?: any) {}
        },
        /**
         * @method updateAll
         * @author João Ribeiro <t: JonnyBGod, gh: mean-expert-official>
         * @license MIT
         * @description
         * Generic updateAll action
         */
        updateAll: class implements Action {
            public readonly type = actionTypes['UPDATE_ALL'];
            public payload: { where: any; data: any };

            constructor(where: any = {}, data: any, public meta?: any) {
                this.payload = { where, data };
            }
        },
        /**
         * @method updateAllSuccess
         * @author João Ribeiro <t: JonnyBGod, gh: mean-expert-official>
         * @license MIT
         * @description
         * Generic updateAllSuccess action
         */
        updateAllSuccess: class implements Action {
            public readonly type = actionTypes['UPDATE_ALL_SUCCESS'];

            constructor(
                public where: any,
                public data: any,
                public meta?: any
            ) {}
        },
        /**
         * @method updateAllFail
         * @author João Ribeiro <t: JonnyBGod, gh: mean-expert-official>
         * @license MIT
         * @description
         * Generic updateAllFail action
         */
        updateAllFail: class implements Action {
            public readonly type = actionTypes['UPDATE_ALL_FAIL'];

            constructor(public payload: any, public meta?: any) {}
        },
        /**
         * @method deleteById
         * @author João Ribeiro <t: JonnyBGod, gh: mean-expert-official>
         * @license MIT
         * @description
         * Generic deleteById action
         */
        deleteById: class implements Action {
            public readonly type = actionTypes['DELETE_BY_ID'];

            constructor(public payload: any, public meta?: any) {}
        },
        /**
         * @method deleteByIdSuccess
         * @author João Ribeiro <t: JonnyBGod, gh: mean-expert-official>
         * @license MIT
         * @description
         * Generic deleteByIdSuccess action
         */
        deleteByIdSuccess: class implements Action {
            public readonly type = actionTypes['DELETE_BY_ID_SUCCESS'];

            constructor(public payload: any, public meta?: any) {}
        }
        /**
         * @method deleteByIdFail
         * @author João Ribeiro <t: JonnyBGod, gh: mean-expert-official>
         * @license MIT
         * @description
         * Generic deleteByIdFail action
         */,
        deleteByIdFail: class implements Action {
            public readonly type = actionTypes['DELETE_BY_ID_FAIL'];

            constructor(public payload: any, public meta?: any) {}
        }
        /**
         * @method updateAttributes
         * @author João Ribeiro <t: JonnyBGod, gh: mean-expert-official>
         * @license MIT
         * @description
         * Generic updateAttributes action
         */,
        updateAttributes: class implements Action {
            public readonly type = actionTypes['UPDATE_ATTRIBUTES'];
            public payload: { id: any; data: T };

            constructor(id: any, data: T, public meta?: any) {
                this.payload = { id, data };
            }
        }
        /**
         * @method updateAttributesSuccess
         * @author João Ribeiro <t: JonnyBGod, gh: mean-expert-official>
         * @license MIT
         * @description
         * Generic updateAttributesSuccess action
         */,
        updateAttributesSuccess: class implements Action {
            public readonly type = actionTypes['UPDATE_ATTRIBUTES_SUCCESS'];

            constructor(public payload: any, public meta?: any) {}
        }
        /**
         * @method updateAttributesFail
         * @author João Ribeiro <t: JonnyBGod, gh: mean-expert-official>
         * @license MIT
         * @description
         * Generic updateAttributesFail action
         */,
        updateAttributesFail: class implements Action {
            public readonly type = actionTypes['UPDATE_ATTRIBUTES_FAIL'];

            constructor(public payload: any, public meta?: any) {}
        }
        /**
         * @method upsert
         * @author João Ribeiro <t: JonnyBGod, gh: mean-expert-official>
         * @license MIT
         * @description
         * Generic upsert action
         */,
        upsert: class implements Action {
            public readonly type = actionTypes['UPSERT'];

            constructor(public payload: any, public meta?: any) {}
        }
        /**
         * @method upsertSuccess
         * @author João Ribeiro <t: JonnyBGod, gh: mean-expert-official>
         * @license MIT
         * @description
         * Generic upsertSuccess action
         */,
        upsertSuccess: class implements Action {
            public readonly type = actionTypes['UPSERT_SUCCESS'];

            constructor(public payload: any, public meta?: any) {}
        }
        /**
         * @method upsertFail
         * @author João Ribeiro <t: JonnyBGod, gh: mean-expert-official>
         * @license MIT
         * @description
         * Generic upsertFail action
         */,
        upsertFail: class implements Action {
            public readonly type = actionTypes['UPSERT_FAIL'];

            constructor(public payload: any, public meta?: any) {}
        }
        /**
         * @method upsertWithWhere
         * @author João Ribeiro <t: JonnyBGod, gh: mean-expert-official>
         * @license MIT
         * @description
         * Generic upsertWithWhere action
         */,
        upsertWithWhere: class implements Action {
            public readonly type = actionTypes['UPSERT_WITH_WHERE'];
            public payload: { where: any; data: any };

            constructor(where: any = {}, data: any, public meta?: any) {
                this.payload = { where, data };
            }
        }
        /**
         * @method upsertWithWhereSuccess
         * @author João Ribeiro <t: JonnyBGod, gh: mean-expert-official>
         * @license MIT
         * @description
         * Generic upsertWithWhereSuccess action
         */,
        upsertWithWhereSuccess: class implements Action {
            public readonly type = actionTypes['UPSERT_WITH_WHERE_SUCCESS'];

            constructor(public payload: any, public meta?: any) {}
        }
        /**
         * @method upsertWithWhereFail
         * @author João Ribeiro <t: JonnyBGod, gh: mean-expert-official>
         * @license MIT
         * @description
         * Generic upsertWithWhereFail action
         */,
        upsertWithWhereFail: class implements Action {
            public readonly type = actionTypes['UPSERT_WITH_WHERE_FAIL'];

            constructor(public payload: any, public meta?: any) {}
        }
        /**
         * @method replaceOrCreate
         * @author João Ribeiro <t: JonnyBGod, gh: mean-expert-official>
         * @license MIT
         * @description
         * Generic replaceOrCreate action
         */,
        replaceOrCreate: class implements Action {
            public readonly type = actionTypes['REPLACE_OR_CREATE'];

            constructor(public payload: any, public meta?: any) {}
        }
        /**
         * @method replaceOrCreateSuccess
         * @author João Ribeiro <t: JonnyBGod, gh: mean-expert-official>
         * @license MIT
         * @description
         * Generic replaceOrCreateSuccess action
         */,
        replaceOrCreateSuccess: class implements Action {
            public readonly type = actionTypes['REPLACE_OR_CREATE_SUCCESS'];

            constructor(public payload: any, public meta?: any) {}
        }
        /**
         * @method replaceOrCreateFail
         * @author João Ribeiro <t: JonnyBGod, gh: mean-expert-official>
         * @license MIT
         * @description
         * Generic replaceOrCreateFail action
         */,
        replaceOrCreateFail: class implements Action {
            public readonly type = actionTypes['REPLACE_OR_CREATE_FAIL'];

            constructor(public payload: any, public meta?: any) {}
        }
        /**
         * @method replaceById
         * @author João Ribeiro <t: JonnyBGod, gh: mean-expert-official>
         * @license MIT
         * @description
         * Generic replaceById action
         */,
        replaceById: class implements Action {
            public readonly type = actionTypes['REPLACE_BY_ID'];
            public payload: { id: any; data: any };

            constructor(id: any, data: any = {}, public meta?: any) {
                this.payload = { id, data };
            }
        }
        /**
         * @method replaceByIdSuccess
         * @author João Ribeiro <t: JonnyBGod, gh: mean-expert-official>
         * @license MIT
         * @description
         * Generic replaceByIdSuccess action
         */,
        replaceByIdSuccess: class implements Action {
            public readonly type = actionTypes['REPLACE_BY_ID_SUCCESS'];

            constructor(public payload: any, public meta?: any) {}
        }
        /**
         * @method replaceByIdFail
         * @author João Ribeiro <t: JonnyBGod, gh: mean-expert-official>
         * @license MIT
         * @description
         * Generic replaceByIdFail action
         */,
        replaceByIdFail: class implements Action {
            public readonly type = actionTypes['REPLACE_BY_ID_FAIL'];

            constructor(public payload: any, public meta?: any) {}
        }
        /**
         * @method patchOrCreate
         * @author João Ribeiro <t: JonnyBGod, gh: mean-expert-official>
         * @license MIT
         * @description
         * Generic patchOrCreate action
         */,
        patchOrCreate: class implements Action {
            public readonly type = actionTypes['PATCH_OR_CREATE'];

            constructor(public payload: any, public meta?: any) {}
        }
        /**
         * @method patchOrCreateSuccess
         * @author João Ribeiro <t: JonnyBGod, gh: mean-expert-official>
         * @license MIT
         * @description
         * Generic patchOrCreateSuccess action
         */,
        patchOrCreateSuccess: class implements Action {
            public readonly type = actionTypes['PATCH_OR_CREATE_SUCCESS'];

            constructor(public payload: any, public meta?: any) {}
        }
        /**
         * @method patchOrCreateFail
         * @author João Ribeiro <t: JonnyBGod, gh: mean-expert-official>
         * @license MIT
         * @description
         * Generic patchOrCreateFail action
         */,
        patchOrCreateFail: class implements Action {
            public readonly type = actionTypes['PATCH_OR_CREATE_FAIL'];

            constructor(public payload: any, public meta?: any) {}
        }
        /**
         * @method patchAttributes
         * @author João Ribeiro <t: JonnyBGod, gh: mean-expert-official>
         * @license MIT
         * @description
         * Generic patchAttributes action
         */,
        patchAttributes: class implements Action {
            public readonly type = actionTypes['PATCH_ATTRIBUTES'];
            public payload: { id: any; data: any };

            constructor(id: any, data: any = {}, public meta?: any) {
                this.payload = { id, data };
            }
        }
        /**
         * @method patchAttributesSuccess
         * @author João Ribeiro <t: JonnyBGod, gh: mean-expert-official>
         * @license MIT
         * @description
         * Generic patchAttributesSuccess action
         */,
        patchAttributesSuccess: class implements Action {
            public readonly type = actionTypes['PATCH_ATTRIBUTES_SUCCESS'];

            constructor(public payload: any, public meta?: any) {}
        }
        /**
         * @method patchAttributesFail
         * @author João Ribeiro <t: JonnyBGod, gh: mean-expert-official>
         * @license MIT
         * @description
         * Generic patchAttributesFail action
         */,
        patchAttributesFail: class implements Action {
            public readonly type = actionTypes['PATCH_ATTRIBUTES_FAIL'];

            constructor(public payload: any, public meta?: any) {}
        }
        /**
         * @method guardFail
         * @author João Ribeiro <t: JonnyBGod, gh: mean-expert-official>
         * @license MIT
         * @description
         * Generic guardFail action
         */,
        guardFail: class implements Action {
            public readonly type = actionTypes['GUARD_FAIL'];
        }
        /**
         * @method resetState
         * @author João Ribeiro <t: JonnyBGod, gh: mean-expert-official>
         * @license MIT
         * @description
         * Generic resetState action
         */,
        resetState: class implements Action {
            public readonly type = actionTypes['RESET_STATE'];
        }
    };
    return actions;
}
