import { Injectable, Inject, Optional } from '@angular/core';
import { Store } from '@ngrx/store';
import { SocketService } from '@base/socket';
import { take, map, switchMap, catchError } from 'rxjs/operators';
import { get<%-: modelName %>ById } from '../reducers/<%-: modelName %>';
import * as Actions from '../actions';

/**
 * socket / ngrx Api services for the `<%-: modelName %>` model.
 */

@Injectable({
    providedIn: 'root',
})

export class <%-: modelName %>Socket {
    protected event;
    protected actions;

    constructor(
        @Inject(SocketService) protected socket:SocketService,
        @Inject(Store) protected store: Store<any>,
    ) {
        const room = '<%-: modelName.toLowerCase() %>';
        this.actions = Actions.<%-: modelName %>Actions;
        this.event = this.socket.init(this, [room]);

        this.event(`${room}.update`).subscribe(this.onUpdate);
        this.event(`${room}.create`).subscribe(this.onNew);
        this.event(`${room}.delete`).subscribe(this.onDelete);
    }

    private async inStore (id) {
        const inStore = await this.store.select(get<%-: modelName %>ById(id)).pipe(
            map(entity => !!entity),
            take(1)
          ).toPromise();

        return inStore;
    }

    protected onUpdate = data => {

        if (this.inStore(data.id)) {
            this.store.dispatch(new this.actions.findByIdSuccess(data));
        }

    };

    protected onNew = async data => {
        this.store.dispatch(new this.actions.replaceOrCreateSuccess(data));
    };

    protected onDelete = async data => {
        this.store.dispatch(new this.actions.deleteByIdSuccess(data));
    };
}
