/* tslint:disable */
let typeCache: { [label: string]: boolean } = {};
export function type<T>(label: T | ''): T {
  if (typeCache[<string> label]) {
    throw new Error(`Action type "${label}" is not unique"`);
  }

  typeCache[<string> label] = true;

  return <T> label;
}

type Defined<T> = T extends undefined ? never : T;
type MergedProperties<U, T> = {
    [K in keyof T & keyof U]: undefined extends T[K]
        ? Defined<T[K] | U[K]>
        : T[K]
};

type MinusKeys<T, U> = Pick<T, Exclude<keyof T, keyof U>>;

export const mergeObject = <T extends object, U extends object>(t: T, u: U) =>
    ({
        ...(t as object),
        ...(u as object)
    } as MinusKeys<T, U> & MinusKeys<U, T> & MergedProperties<U, T>);
